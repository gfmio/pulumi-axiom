# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetMonitorResult',
    'AwaitableGetMonitorResult',
    'get_monitor',
    'get_monitor_output',
]

@pulumi.output_type
class GetMonitorResult:
    """
    A collection of values returned by getMonitor.
    """
    def __init__(__self__, alert_on_no_data=None, apl_query=None, description=None, disabled_until=None, id=None, interval_minutes=None, name=None, notifier_ids=None, notify_by_group=None, operator=None, range_minutes=None, resolvable=None, threshold=None):
        if alert_on_no_data and not isinstance(alert_on_no_data, bool):
            raise TypeError("Expected argument 'alert_on_no_data' to be a bool")
        pulumi.set(__self__, "alert_on_no_data", alert_on_no_data)
        if apl_query and not isinstance(apl_query, str):
            raise TypeError("Expected argument 'apl_query' to be a str")
        pulumi.set(__self__, "apl_query", apl_query)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if disabled_until and not isinstance(disabled_until, str):
            raise TypeError("Expected argument 'disabled_until' to be a str")
        pulumi.set(__self__, "disabled_until", disabled_until)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval_minutes and not isinstance(interval_minutes, int):
            raise TypeError("Expected argument 'interval_minutes' to be a int")
        pulumi.set(__self__, "interval_minutes", interval_minutes)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if notifier_ids and not isinstance(notifier_ids, list):
            raise TypeError("Expected argument 'notifier_ids' to be a list")
        pulumi.set(__self__, "notifier_ids", notifier_ids)
        if notify_by_group and not isinstance(notify_by_group, bool):
            raise TypeError("Expected argument 'notify_by_group' to be a bool")
        pulumi.set(__self__, "notify_by_group", notify_by_group)
        if operator and not isinstance(operator, str):
            raise TypeError("Expected argument 'operator' to be a str")
        pulumi.set(__self__, "operator", operator)
        if range_minutes and not isinstance(range_minutes, int):
            raise TypeError("Expected argument 'range_minutes' to be a int")
        pulumi.set(__self__, "range_minutes", range_minutes)
        if resolvable and not isinstance(resolvable, bool):
            raise TypeError("Expected argument 'resolvable' to be a bool")
        pulumi.set(__self__, "resolvable", resolvable)
        if threshold and not isinstance(threshold, float):
            raise TypeError("Expected argument 'threshold' to be a float")
        pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="alertOnNoData")
    def alert_on_no_data(self) -> bool:
        """
        If the monitor should trigger an alert if there is no data
        """
        return pulumi.get(self, "alert_on_no_data")

    @property
    @pulumi.getter(name="aplQuery")
    def apl_query(self) -> str:
        """
        The query used inside the monitor
        """
        return pulumi.get(self, "apl_query")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Monitor description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disabledUntil")
    def disabled_until(self) -> str:
        """
        The time the monitor will be disabled until
        """
        return pulumi.get(self, "disabled_until")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Monitor identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intervalMinutes")
    def interval_minutes(self) -> int:
        """
        How often the monitor should run
        """
        return pulumi.get(self, "interval_minutes")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Monitor name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifierIds")
    def notifier_ids(self) -> Sequence[str]:
        """
        A list of notifier id's to be used when this monitor triggers
        """
        return pulumi.get(self, "notifier_ids")

    @property
    @pulumi.getter(name="notifyByGroup")
    def notify_by_group(self) -> bool:
        return pulumi.get(self, "notify_by_group")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Operator used in monitor trigger evaluation
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rangeMinutes")
    def range_minutes(self) -> int:
        """
        Query time range from now
        """
        return pulumi.get(self, "range_minutes")

    @property
    @pulumi.getter
    def resolvable(self) -> bool:
        return pulumi.get(self, "resolvable")

    @property
    @pulumi.getter
    def threshold(self) -> float:
        """
        The threshold where the monitor should trigger
        """
        return pulumi.get(self, "threshold")


class AwaitableGetMonitorResult(GetMonitorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMonitorResult(
            alert_on_no_data=self.alert_on_no_data,
            apl_query=self.apl_query,
            description=self.description,
            disabled_until=self.disabled_until,
            id=self.id,
            interval_minutes=self.interval_minutes,
            name=self.name,
            notifier_ids=self.notifier_ids,
            notify_by_group=self.notify_by_group,
            operator=self.operator,
            range_minutes=self.range_minutes,
            resolvable=self.resolvable,
            threshold=self.threshold)


def get_monitor(id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMonitorResult:
    """
    Use this data source to access information about an existing resource.

    :param str id: Monitor identifier
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('axiom:index/getMonitor:getMonitor', __args__, opts=opts, typ=GetMonitorResult).value

    return AwaitableGetMonitorResult(
        alert_on_no_data=pulumi.get(__ret__, 'alert_on_no_data'),
        apl_query=pulumi.get(__ret__, 'apl_query'),
        description=pulumi.get(__ret__, 'description'),
        disabled_until=pulumi.get(__ret__, 'disabled_until'),
        id=pulumi.get(__ret__, 'id'),
        interval_minutes=pulumi.get(__ret__, 'interval_minutes'),
        name=pulumi.get(__ret__, 'name'),
        notifier_ids=pulumi.get(__ret__, 'notifier_ids'),
        notify_by_group=pulumi.get(__ret__, 'notify_by_group'),
        operator=pulumi.get(__ret__, 'operator'),
        range_minutes=pulumi.get(__ret__, 'range_minutes'),
        resolvable=pulumi.get(__ret__, 'resolvable'),
        threshold=pulumi.get(__ret__, 'threshold'))


@_utilities.lift_output_func(get_monitor)
def get_monitor_output(id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMonitorResult]:
    """
    Use this data source to access information about an existing resource.

    :param str id: Monitor identifier
    """
    ...
