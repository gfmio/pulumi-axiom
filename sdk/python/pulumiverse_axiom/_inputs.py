# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'NotifierPropertiesArgs',
    'NotifierPropertiesDiscordArgs',
    'NotifierPropertiesDiscordWebhookArgs',
    'NotifierPropertiesEmailArgs',
    'NotifierPropertiesOpsgenieArgs',
    'NotifierPropertiesPagerdutyArgs',
    'NotifierPropertiesSlackArgs',
    'NotifierPropertiesWebhookArgs',
]

@pulumi.input_type
class NotifierPropertiesArgs:
    def __init__(__self__, *,
                 discord: Optional[pulumi.Input['NotifierPropertiesDiscordArgs']] = None,
                 discord_webhook: Optional[pulumi.Input['NotifierPropertiesDiscordWebhookArgs']] = None,
                 email: Optional[pulumi.Input['NotifierPropertiesEmailArgs']] = None,
                 opsgenie: Optional[pulumi.Input['NotifierPropertiesOpsgenieArgs']] = None,
                 pagerduty: Optional[pulumi.Input['NotifierPropertiesPagerdutyArgs']] = None,
                 slack: Optional[pulumi.Input['NotifierPropertiesSlackArgs']] = None,
                 webhook: Optional[pulumi.Input['NotifierPropertiesWebhookArgs']] = None):
        if discord is not None:
            pulumi.set(__self__, "discord", discord)
        if discord_webhook is not None:
            pulumi.set(__self__, "discord_webhook", discord_webhook)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if opsgenie is not None:
            pulumi.set(__self__, "opsgenie", opsgenie)
        if pagerduty is not None:
            pulumi.set(__self__, "pagerduty", pagerduty)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter
    def discord(self) -> Optional[pulumi.Input['NotifierPropertiesDiscordArgs']]:
        return pulumi.get(self, "discord")

    @discord.setter
    def discord(self, value: Optional[pulumi.Input['NotifierPropertiesDiscordArgs']]):
        pulumi.set(self, "discord", value)

    @property
    @pulumi.getter(name="discordWebhook")
    def discord_webhook(self) -> Optional[pulumi.Input['NotifierPropertiesDiscordWebhookArgs']]:
        return pulumi.get(self, "discord_webhook")

    @discord_webhook.setter
    def discord_webhook(self, value: Optional[pulumi.Input['NotifierPropertiesDiscordWebhookArgs']]):
        pulumi.set(self, "discord_webhook", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input['NotifierPropertiesEmailArgs']]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input['NotifierPropertiesEmailArgs']]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def opsgenie(self) -> Optional[pulumi.Input['NotifierPropertiesOpsgenieArgs']]:
        return pulumi.get(self, "opsgenie")

    @opsgenie.setter
    def opsgenie(self, value: Optional[pulumi.Input['NotifierPropertiesOpsgenieArgs']]):
        pulumi.set(self, "opsgenie", value)

    @property
    @pulumi.getter
    def pagerduty(self) -> Optional[pulumi.Input['NotifierPropertiesPagerdutyArgs']]:
        return pulumi.get(self, "pagerduty")

    @pagerduty.setter
    def pagerduty(self, value: Optional[pulumi.Input['NotifierPropertiesPagerdutyArgs']]):
        pulumi.set(self, "pagerduty", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['NotifierPropertiesSlackArgs']]:
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['NotifierPropertiesSlackArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def webhook(self) -> Optional[pulumi.Input['NotifierPropertiesWebhookArgs']]:
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: Optional[pulumi.Input['NotifierPropertiesWebhookArgs']]):
        pulumi.set(self, "webhook", value)


@pulumi.input_type
class NotifierPropertiesDiscordArgs:
    def __init__(__self__, *,
                 discord_channel: pulumi.Input[str],
                 discord_token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] discord_channel: The discord channel
        :param pulumi.Input[str] discord_token: The discord token
        """
        pulumi.set(__self__, "discord_channel", discord_channel)
        pulumi.set(__self__, "discord_token", discord_token)

    @property
    @pulumi.getter(name="discordChannel")
    def discord_channel(self) -> pulumi.Input[str]:
        """
        The discord channel
        """
        return pulumi.get(self, "discord_channel")

    @discord_channel.setter
    def discord_channel(self, value: pulumi.Input[str]):
        pulumi.set(self, "discord_channel", value)

    @property
    @pulumi.getter(name="discordToken")
    def discord_token(self) -> pulumi.Input[str]:
        """
        The discord token
        """
        return pulumi.get(self, "discord_token")

    @discord_token.setter
    def discord_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "discord_token", value)


@pulumi.input_type
class NotifierPropertiesDiscordWebhookArgs:
    def __init__(__self__, *,
                 discord_webhook_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] discord_webhook_url: The discord webhook URL
        """
        pulumi.set(__self__, "discord_webhook_url", discord_webhook_url)

    @property
    @pulumi.getter(name="discordWebhookUrl")
    def discord_webhook_url(self) -> pulumi.Input[str]:
        """
        The discord webhook URL
        """
        return pulumi.get(self, "discord_webhook_url")

    @discord_webhook_url.setter
    def discord_webhook_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "discord_webhook_url", value)


@pulumi.input_type
class NotifierPropertiesEmailArgs:
    def __init__(__self__, *,
                 emails: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] emails: The emails to be notified
        """
        pulumi.set(__self__, "emails", emails)

    @property
    @pulumi.getter
    def emails(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The emails to be notified
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "emails", value)


@pulumi.input_type
class NotifierPropertiesOpsgenieArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 is_eu: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] api_key: The opsgenie API key
        :param pulumi.Input[bool] is_eu: The opsgenie is EU
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "is_eu", is_eu)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        The opsgenie API key
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="isEu")
    def is_eu(self) -> pulumi.Input[bool]:
        """
        The opsgenie is EU
        """
        return pulumi.get(self, "is_eu")

    @is_eu.setter
    def is_eu(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_eu", value)


@pulumi.input_type
class NotifierPropertiesPagerdutyArgs:
    def __init__(__self__, *,
                 routing_key: pulumi.Input[str],
                 token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] routing_key: The pagerduty routing key
        :param pulumi.Input[str] token: The pager duty token
        """
        pulumi.set(__self__, "routing_key", routing_key)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> pulumi.Input[str]:
        """
        The pagerduty routing key
        """
        return pulumi.get(self, "routing_key")

    @routing_key.setter
    def routing_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "routing_key", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        The pager duty token
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class NotifierPropertiesSlackArgs:
    def __init__(__self__, *,
                 slack_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] slack_url: The slack URL
        """
        pulumi.set(__self__, "slack_url", slack_url)

    @property
    @pulumi.getter(name="slackUrl")
    def slack_url(self) -> pulumi.Input[str]:
        """
        The slack URL
        """
        return pulumi.get(self, "slack_url")

    @slack_url.setter
    def slack_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "slack_url", value)


@pulumi.input_type
class NotifierPropertiesWebhookArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: The webhook URL
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The webhook URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


