# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MonitorArgs', 'Monitor']

@pulumi.input_type
class MonitorArgs:
    def __init__(__self__, *,
                 alert_on_no_data: pulumi.Input[bool],
                 apl_query: pulumi.Input[str],
                 interval_minutes: pulumi.Input[int],
                 notify_by_group: pulumi.Input[bool],
                 operator: pulumi.Input[str],
                 range_minutes: pulumi.Input[int],
                 threshold: pulumi.Input[float],
                 description: Optional[pulumi.Input[str]] = None,
                 disabled_until: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resolvable: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Monitor resource.
        :param pulumi.Input[bool] alert_on_no_data: If the monitor should trigger an alert if there is no data
        :param pulumi.Input[str] apl_query: The query used inside the monitor
        :param pulumi.Input[int] interval_minutes: How often the monitor should run
        :param pulumi.Input[bool] notify_by_group: If the monitor should track non-time groups separately
        :param pulumi.Input[str] operator: Operator used in monitor trigger evaluation
        :param pulumi.Input[int] range_minutes: Query time range from now
        :param pulumi.Input[float] threshold: The threshold where the monitor should trigger
        :param pulumi.Input[str] description: Monitor description
        :param pulumi.Input[str] disabled_until: The time the monitor will be disabled until
        :param pulumi.Input[str] name: Monitor name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifier_ids: A list of notifier id's to be used when this monitor triggers
        :param pulumi.Input[bool] resolvable: Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
               monitors
        """
        pulumi.set(__self__, "alert_on_no_data", alert_on_no_data)
        pulumi.set(__self__, "apl_query", apl_query)
        pulumi.set(__self__, "interval_minutes", interval_minutes)
        pulumi.set(__self__, "notify_by_group", notify_by_group)
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "range_minutes", range_minutes)
        pulumi.set(__self__, "threshold", threshold)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled_until is not None:
            pulumi.set(__self__, "disabled_until", disabled_until)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifier_ids is not None:
            pulumi.set(__self__, "notifier_ids", notifier_ids)
        if resolvable is not None:
            pulumi.set(__self__, "resolvable", resolvable)

    @property
    @pulumi.getter(name="alertOnNoData")
    def alert_on_no_data(self) -> pulumi.Input[bool]:
        """
        If the monitor should trigger an alert if there is no data
        """
        return pulumi.get(self, "alert_on_no_data")

    @alert_on_no_data.setter
    def alert_on_no_data(self, value: pulumi.Input[bool]):
        pulumi.set(self, "alert_on_no_data", value)

    @property
    @pulumi.getter(name="aplQuery")
    def apl_query(self) -> pulumi.Input[str]:
        """
        The query used inside the monitor
        """
        return pulumi.get(self, "apl_query")

    @apl_query.setter
    def apl_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "apl_query", value)

    @property
    @pulumi.getter(name="intervalMinutes")
    def interval_minutes(self) -> pulumi.Input[int]:
        """
        How often the monitor should run
        """
        return pulumi.get(self, "interval_minutes")

    @interval_minutes.setter
    def interval_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval_minutes", value)

    @property
    @pulumi.getter(name="notifyByGroup")
    def notify_by_group(self) -> pulumi.Input[bool]:
        """
        If the monitor should track non-time groups separately
        """
        return pulumi.get(self, "notify_by_group")

    @notify_by_group.setter
    def notify_by_group(self, value: pulumi.Input[bool]):
        pulumi.set(self, "notify_by_group", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Operator used in monitor trigger evaluation
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="rangeMinutes")
    def range_minutes(self) -> pulumi.Input[int]:
        """
        Query time range from now
        """
        return pulumi.get(self, "range_minutes")

    @range_minutes.setter
    def range_minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "range_minutes", value)

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Input[float]:
        """
        The threshold where the monitor should trigger
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disabledUntil")
    def disabled_until(self) -> Optional[pulumi.Input[str]]:
        """
        The time the monitor will be disabled until
        """
        return pulumi.get(self, "disabled_until")

    @disabled_until.setter
    def disabled_until(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_until", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifierIds")
    def notifier_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of notifier id's to be used when this monitor triggers
        """
        return pulumi.get(self, "notifier_ids")

    @notifier_ids.setter
    def notifier_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notifier_ids", value)

    @property
    @pulumi.getter
    def resolvable(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
        monitors
        """
        return pulumi.get(self, "resolvable")

    @resolvable.setter
    def resolvable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolvable", value)


@pulumi.input_type
class _MonitorState:
    def __init__(__self__, *,
                 alert_on_no_data: Optional[pulumi.Input[bool]] = None,
                 apl_query: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled_until: Optional[pulumi.Input[str]] = None,
                 interval_minutes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notify_by_group: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 range_minutes: Optional[pulumi.Input[int]] = None,
                 resolvable: Optional[pulumi.Input[bool]] = None,
                 threshold: Optional[pulumi.Input[float]] = None):
        """
        Input properties used for looking up and filtering Monitor resources.
        :param pulumi.Input[bool] alert_on_no_data: If the monitor should trigger an alert if there is no data
        :param pulumi.Input[str] apl_query: The query used inside the monitor
        :param pulumi.Input[str] description: Monitor description
        :param pulumi.Input[str] disabled_until: The time the monitor will be disabled until
        :param pulumi.Input[int] interval_minutes: How often the monitor should run
        :param pulumi.Input[str] name: Monitor name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifier_ids: A list of notifier id's to be used when this monitor triggers
        :param pulumi.Input[bool] notify_by_group: If the monitor should track non-time groups separately
        :param pulumi.Input[str] operator: Operator used in monitor trigger evaluation
        :param pulumi.Input[int] range_minutes: Query time range from now
        :param pulumi.Input[bool] resolvable: Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
               monitors
        :param pulumi.Input[float] threshold: The threshold where the monitor should trigger
        """
        if alert_on_no_data is not None:
            pulumi.set(__self__, "alert_on_no_data", alert_on_no_data)
        if apl_query is not None:
            pulumi.set(__self__, "apl_query", apl_query)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled_until is not None:
            pulumi.set(__self__, "disabled_until", disabled_until)
        if interval_minutes is not None:
            pulumi.set(__self__, "interval_minutes", interval_minutes)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifier_ids is not None:
            pulumi.set(__self__, "notifier_ids", notifier_ids)
        if notify_by_group is not None:
            pulumi.set(__self__, "notify_by_group", notify_by_group)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if range_minutes is not None:
            pulumi.set(__self__, "range_minutes", range_minutes)
        if resolvable is not None:
            pulumi.set(__self__, "resolvable", resolvable)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="alertOnNoData")
    def alert_on_no_data(self) -> Optional[pulumi.Input[bool]]:
        """
        If the monitor should trigger an alert if there is no data
        """
        return pulumi.get(self, "alert_on_no_data")

    @alert_on_no_data.setter
    def alert_on_no_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_on_no_data", value)

    @property
    @pulumi.getter(name="aplQuery")
    def apl_query(self) -> Optional[pulumi.Input[str]]:
        """
        The query used inside the monitor
        """
        return pulumi.get(self, "apl_query")

    @apl_query.setter
    def apl_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apl_query", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disabledUntil")
    def disabled_until(self) -> Optional[pulumi.Input[str]]:
        """
        The time the monitor will be disabled until
        """
        return pulumi.get(self, "disabled_until")

    @disabled_until.setter
    def disabled_until(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "disabled_until", value)

    @property
    @pulumi.getter(name="intervalMinutes")
    def interval_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        How often the monitor should run
        """
        return pulumi.get(self, "interval_minutes")

    @interval_minutes.setter
    def interval_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval_minutes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Monitor name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifierIds")
    def notifier_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of notifier id's to be used when this monitor triggers
        """
        return pulumi.get(self, "notifier_ids")

    @notifier_ids.setter
    def notifier_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notifier_ids", value)

    @property
    @pulumi.getter(name="notifyByGroup")
    def notify_by_group(self) -> Optional[pulumi.Input[bool]]:
        """
        If the monitor should track non-time groups separately
        """
        return pulumi.get(self, "notify_by_group")

    @notify_by_group.setter
    def notify_by_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify_by_group", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator used in monitor trigger evaluation
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="rangeMinutes")
    def range_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Query time range from now
        """
        return pulumi.get(self, "range_minutes")

    @range_minutes.setter
    def range_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "range_minutes", value)

    @property
    @pulumi.getter
    def resolvable(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
        monitors
        """
        return pulumi.get(self, "resolvable")

    @resolvable.setter
    def resolvable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolvable", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        """
        The threshold where the monitor should trigger
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)


class Monitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_on_no_data: Optional[pulumi.Input[bool]] = None,
                 apl_query: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled_until: Optional[pulumi.Input[str]] = None,
                 interval_minutes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notify_by_group: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 range_minutes: Optional[pulumi.Input[int]] = None,
                 resolvable: Optional[pulumi.Input[bool]] = None,
                 threshold: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        """
        Create a Monitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] alert_on_no_data: If the monitor should trigger an alert if there is no data
        :param pulumi.Input[str] apl_query: The query used inside the monitor
        :param pulumi.Input[str] description: Monitor description
        :param pulumi.Input[str] disabled_until: The time the monitor will be disabled until
        :param pulumi.Input[int] interval_minutes: How often the monitor should run
        :param pulumi.Input[str] name: Monitor name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifier_ids: A list of notifier id's to be used when this monitor triggers
        :param pulumi.Input[bool] notify_by_group: If the monitor should track non-time groups separately
        :param pulumi.Input[str] operator: Operator used in monitor trigger evaluation
        :param pulumi.Input[int] range_minutes: Query time range from now
        :param pulumi.Input[bool] resolvable: Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
               monitors
        :param pulumi.Input[float] threshold: The threshold where the monitor should trigger
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MonitorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Monitor resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_on_no_data: Optional[pulumi.Input[bool]] = None,
                 apl_query: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled_until: Optional[pulumi.Input[str]] = None,
                 interval_minutes: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 notify_by_group: Optional[pulumi.Input[bool]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 range_minutes: Optional[pulumi.Input[int]] = None,
                 resolvable: Optional[pulumi.Input[bool]] = None,
                 threshold: Optional[pulumi.Input[float]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitorArgs.__new__(MonitorArgs)

            if alert_on_no_data is None and not opts.urn:
                raise TypeError("Missing required property 'alert_on_no_data'")
            __props__.__dict__["alert_on_no_data"] = alert_on_no_data
            if apl_query is None and not opts.urn:
                raise TypeError("Missing required property 'apl_query'")
            __props__.__dict__["apl_query"] = apl_query
            __props__.__dict__["description"] = description
            __props__.__dict__["disabled_until"] = disabled_until
            if interval_minutes is None and not opts.urn:
                raise TypeError("Missing required property 'interval_minutes'")
            __props__.__dict__["interval_minutes"] = interval_minutes
            __props__.__dict__["name"] = name
            __props__.__dict__["notifier_ids"] = notifier_ids
            if notify_by_group is None and not opts.urn:
                raise TypeError("Missing required property 'notify_by_group'")
            __props__.__dict__["notify_by_group"] = notify_by_group
            if operator is None and not opts.urn:
                raise TypeError("Missing required property 'operator'")
            __props__.__dict__["operator"] = operator
            if range_minutes is None and not opts.urn:
                raise TypeError("Missing required property 'range_minutes'")
            __props__.__dict__["range_minutes"] = range_minutes
            __props__.__dict__["resolvable"] = resolvable
            if threshold is None and not opts.urn:
                raise TypeError("Missing required property 'threshold'")
            __props__.__dict__["threshold"] = threshold
        super(Monitor, __self__).__init__(
            'axiom:index/monitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_on_no_data: Optional[pulumi.Input[bool]] = None,
            apl_query: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disabled_until: Optional[pulumi.Input[str]] = None,
            interval_minutes: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notifier_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            notify_by_group: Optional[pulumi.Input[bool]] = None,
            operator: Optional[pulumi.Input[str]] = None,
            range_minutes: Optional[pulumi.Input[int]] = None,
            resolvable: Optional[pulumi.Input[bool]] = None,
            threshold: Optional[pulumi.Input[float]] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] alert_on_no_data: If the monitor should trigger an alert if there is no data
        :param pulumi.Input[str] apl_query: The query used inside the monitor
        :param pulumi.Input[str] description: Monitor description
        :param pulumi.Input[str] disabled_until: The time the monitor will be disabled until
        :param pulumi.Input[int] interval_minutes: How often the monitor should run
        :param pulumi.Input[str] name: Monitor name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifier_ids: A list of notifier id's to be used when this monitor triggers
        :param pulumi.Input[bool] notify_by_group: If the monitor should track non-time groups separately
        :param pulumi.Input[str] operator: Operator used in monitor trigger evaluation
        :param pulumi.Input[int] range_minutes: Query time range from now
        :param pulumi.Input[bool] resolvable: Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
               monitors
        :param pulumi.Input[float] threshold: The threshold where the monitor should trigger
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MonitorState.__new__(_MonitorState)

        __props__.__dict__["alert_on_no_data"] = alert_on_no_data
        __props__.__dict__["apl_query"] = apl_query
        __props__.__dict__["description"] = description
        __props__.__dict__["disabled_until"] = disabled_until
        __props__.__dict__["interval_minutes"] = interval_minutes
        __props__.__dict__["name"] = name
        __props__.__dict__["notifier_ids"] = notifier_ids
        __props__.__dict__["notify_by_group"] = notify_by_group
        __props__.__dict__["operator"] = operator
        __props__.__dict__["range_minutes"] = range_minutes
        __props__.__dict__["resolvable"] = resolvable
        __props__.__dict__["threshold"] = threshold
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertOnNoData")
    def alert_on_no_data(self) -> pulumi.Output[bool]:
        """
        If the monitor should trigger an alert if there is no data
        """
        return pulumi.get(self, "alert_on_no_data")

    @property
    @pulumi.getter(name="aplQuery")
    def apl_query(self) -> pulumi.Output[str]:
        """
        The query used inside the monitor
        """
        return pulumi.get(self, "apl_query")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Monitor description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disabledUntil")
    def disabled_until(self) -> pulumi.Output[Optional[str]]:
        """
        The time the monitor will be disabled until
        """
        return pulumi.get(self, "disabled_until")

    @property
    @pulumi.getter(name="intervalMinutes")
    def interval_minutes(self) -> pulumi.Output[int]:
        """
        How often the monitor should run
        """
        return pulumi.get(self, "interval_minutes")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Monitor name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifierIds")
    def notifier_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of notifier id's to be used when this monitor triggers
        """
        return pulumi.get(self, "notifier_ids")

    @property
    @pulumi.getter(name="notifyByGroup")
    def notify_by_group(self) -> pulumi.Output[bool]:
        """
        If the monitor should track non-time groups separately
        """
        return pulumi.get(self, "notify_by_group")

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Output[str]:
        """
        Operator used in monitor trigger evaluation
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="rangeMinutes")
    def range_minutes(self) -> pulumi.Output[int]:
        """
        Query time range from now
        """
        return pulumi.get(self, "range_minutes")

    @property
    @pulumi.getter
    def resolvable(self) -> pulumi.Output[bool]:
        """
        Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
        monitors
        """
        return pulumi.get(self, "resolvable")

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[float]:
        """
        The threshold where the monitor should trigger
        """
        return pulumi.get(self, "threshold")

