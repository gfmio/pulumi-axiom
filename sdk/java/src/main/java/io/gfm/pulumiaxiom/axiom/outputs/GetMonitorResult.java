// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.gfm.pulumiaxiom.axiom.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetMonitorResult {
    /**
     * @return If the monitor should trigger an alert if there is no data
     * 
     */
    private Boolean alertOnNoData;
    /**
     * @return The query used inside the monitor
     * 
     */
    private String aplQuery;
    /**
     * @return Monitor description
     * 
     */
    private String description;
    /**
     * @return The time the monitor will be disabled until
     * 
     */
    private String disabledUntil;
    /**
     * @return Monitor identifier
     * 
     */
    private String id;
    /**
     * @return How often the monitor should run
     * 
     */
    private Integer intervalMinutes;
    /**
     * @return Monitor name
     * 
     */
    private String name;
    /**
     * @return A list of notifier id&#39;s to be used when this monitor triggers
     * 
     */
    private List<String> notifierIds;
    private Boolean notifyByGroup;
    /**
     * @return Operator used in monitor trigger evaluation
     * 
     */
    private String operator;
    /**
     * @return Query time range from now
     * 
     */
    private Integer rangeMinutes;
    private Boolean resolvable;
    /**
     * @return The threshold where the monitor should trigger
     * 
     */
    private Double threshold;

    private GetMonitorResult() {}
    /**
     * @return If the monitor should trigger an alert if there is no data
     * 
     */
    public Boolean alertOnNoData() {
        return this.alertOnNoData;
    }
    /**
     * @return The query used inside the monitor
     * 
     */
    public String aplQuery() {
        return this.aplQuery;
    }
    /**
     * @return Monitor description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return The time the monitor will be disabled until
     * 
     */
    public String disabledUntil() {
        return this.disabledUntil;
    }
    /**
     * @return Monitor identifier
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return How often the monitor should run
     * 
     */
    public Integer intervalMinutes() {
        return this.intervalMinutes;
    }
    /**
     * @return Monitor name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A list of notifier id&#39;s to be used when this monitor triggers
     * 
     */
    public List<String> notifierIds() {
        return this.notifierIds;
    }
    public Boolean notifyByGroup() {
        return this.notifyByGroup;
    }
    /**
     * @return Operator used in monitor trigger evaluation
     * 
     */
    public String operator() {
        return this.operator;
    }
    /**
     * @return Query time range from now
     * 
     */
    public Integer rangeMinutes() {
        return this.rangeMinutes;
    }
    public Boolean resolvable() {
        return this.resolvable;
    }
    /**
     * @return The threshold where the monitor should trigger
     * 
     */
    public Double threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean alertOnNoData;
        private String aplQuery;
        private String description;
        private String disabledUntil;
        private String id;
        private Integer intervalMinutes;
        private String name;
        private List<String> notifierIds;
        private Boolean notifyByGroup;
        private String operator;
        private Integer rangeMinutes;
        private Boolean resolvable;
        private Double threshold;
        public Builder() {}
        public Builder(GetMonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertOnNoData = defaults.alertOnNoData;
    	      this.aplQuery = defaults.aplQuery;
    	      this.description = defaults.description;
    	      this.disabledUntil = defaults.disabledUntil;
    	      this.id = defaults.id;
    	      this.intervalMinutes = defaults.intervalMinutes;
    	      this.name = defaults.name;
    	      this.notifierIds = defaults.notifierIds;
    	      this.notifyByGroup = defaults.notifyByGroup;
    	      this.operator = defaults.operator;
    	      this.rangeMinutes = defaults.rangeMinutes;
    	      this.resolvable = defaults.resolvable;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder alertOnNoData(Boolean alertOnNoData) {
            if (alertOnNoData == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "alertOnNoData");
            }
            this.alertOnNoData = alertOnNoData;
            return this;
        }
        @CustomType.Setter
        public Builder aplQuery(String aplQuery) {
            if (aplQuery == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "aplQuery");
            }
            this.aplQuery = aplQuery;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder disabledUntil(String disabledUntil) {
            if (disabledUntil == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "disabledUntil");
            }
            this.disabledUntil = disabledUntil;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder intervalMinutes(Integer intervalMinutes) {
            if (intervalMinutes == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "intervalMinutes");
            }
            this.intervalMinutes = intervalMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder notifierIds(List<String> notifierIds) {
            if (notifierIds == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "notifierIds");
            }
            this.notifierIds = notifierIds;
            return this;
        }
        public Builder notifierIds(String... notifierIds) {
            return notifierIds(List.of(notifierIds));
        }
        @CustomType.Setter
        public Builder notifyByGroup(Boolean notifyByGroup) {
            if (notifyByGroup == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "notifyByGroup");
            }
            this.notifyByGroup = notifyByGroup;
            return this;
        }
        @CustomType.Setter
        public Builder operator(String operator) {
            if (operator == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "operator");
            }
            this.operator = operator;
            return this;
        }
        @CustomType.Setter
        public Builder rangeMinutes(Integer rangeMinutes) {
            if (rangeMinutes == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "rangeMinutes");
            }
            this.rangeMinutes = rangeMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder resolvable(Boolean resolvable) {
            if (resolvable == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "resolvable");
            }
            this.resolvable = resolvable;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetMonitorResult", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public GetMonitorResult build() {
            final var _resultValue = new GetMonitorResult();
            _resultValue.alertOnNoData = alertOnNoData;
            _resultValue.aplQuery = aplQuery;
            _resultValue.description = description;
            _resultValue.disabledUntil = disabledUntil;
            _resultValue.id = id;
            _resultValue.intervalMinutes = intervalMinutes;
            _resultValue.name = name;
            _resultValue.notifierIds = notifierIds;
            _resultValue.notifyByGroup = notifyByGroup;
            _resultValue.operator = operator;
            _resultValue.rangeMinutes = rangeMinutes;
            _resultValue.resolvable = resolvable;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
