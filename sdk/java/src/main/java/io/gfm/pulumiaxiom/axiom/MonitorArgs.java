// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.gfm.pulumiaxiom.axiom;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MonitorArgs extends com.pulumi.resources.ResourceArgs {

    public static final MonitorArgs Empty = new MonitorArgs();

    /**
     * If the monitor should trigger an alert if there is no data
     * 
     */
    @Import(name="alertOnNoData", required=true)
    private Output<Boolean> alertOnNoData;

    /**
     * @return If the monitor should trigger an alert if there is no data
     * 
     */
    public Output<Boolean> alertOnNoData() {
        return this.alertOnNoData;
    }

    /**
     * The query used inside the monitor
     * 
     */
    @Import(name="aplQuery", required=true)
    private Output<String> aplQuery;

    /**
     * @return The query used inside the monitor
     * 
     */
    public Output<String> aplQuery() {
        return this.aplQuery;
    }

    /**
     * Monitor description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Monitor description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The time the monitor will be disabled until
     * 
     */
    @Import(name="disabledUntil")
    private @Nullable Output<String> disabledUntil;

    /**
     * @return The time the monitor will be disabled until
     * 
     */
    public Optional<Output<String>> disabledUntil() {
        return Optional.ofNullable(this.disabledUntil);
    }

    /**
     * How often the monitor should run
     * 
     */
    @Import(name="intervalMinutes", required=true)
    private Output<Integer> intervalMinutes;

    /**
     * @return How often the monitor should run
     * 
     */
    public Output<Integer> intervalMinutes() {
        return this.intervalMinutes;
    }

    /**
     * Monitor name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Monitor name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A list of notifier id&#39;s to be used when this monitor triggers
     * 
     */
    @Import(name="notifierIds")
    private @Nullable Output<List<String>> notifierIds;

    /**
     * @return A list of notifier id&#39;s to be used when this monitor triggers
     * 
     */
    public Optional<Output<List<String>>> notifierIds() {
        return Optional.ofNullable(this.notifierIds);
    }

    /**
     * If the monitor should track non-time groups separately
     * 
     */
    @Import(name="notifyByGroup", required=true)
    private Output<Boolean> notifyByGroup;

    /**
     * @return If the monitor should track non-time groups separately
     * 
     */
    public Output<Boolean> notifyByGroup() {
        return this.notifyByGroup;
    }

    /**
     * Operator used in monitor trigger evaluation
     * 
     */
    @Import(name="operator", required=true)
    private Output<String> operator;

    /**
     * @return Operator used in monitor trigger evaluation
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }

    /**
     * Query time range from now
     * 
     */
    @Import(name="rangeMinutes", required=true)
    private Output<Integer> rangeMinutes;

    /**
     * @return Query time range from now
     * 
     */
    public Output<Integer> rangeMinutes() {
        return this.rangeMinutes;
    }

    /**
     * Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
     * monitors
     * 
     */
    @Import(name="resolvable")
    private @Nullable Output<Boolean> resolvable;

    /**
     * @return Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
     * monitors
     * 
     */
    public Optional<Output<Boolean>> resolvable() {
        return Optional.ofNullable(this.resolvable);
    }

    /**
     * The threshold where the monitor should trigger
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Double> threshold;

    /**
     * @return The threshold where the monitor should trigger
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    private MonitorArgs() {}

    private MonitorArgs(MonitorArgs $) {
        this.alertOnNoData = $.alertOnNoData;
        this.aplQuery = $.aplQuery;
        this.description = $.description;
        this.disabledUntil = $.disabledUntil;
        this.intervalMinutes = $.intervalMinutes;
        this.name = $.name;
        this.notifierIds = $.notifierIds;
        this.notifyByGroup = $.notifyByGroup;
        this.operator = $.operator;
        this.rangeMinutes = $.rangeMinutes;
        this.resolvable = $.resolvable;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MonitorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MonitorArgs $;

        public Builder() {
            $ = new MonitorArgs();
        }

        public Builder(MonitorArgs defaults) {
            $ = new MonitorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertOnNoData If the monitor should trigger an alert if there is no data
         * 
         * @return builder
         * 
         */
        public Builder alertOnNoData(Output<Boolean> alertOnNoData) {
            $.alertOnNoData = alertOnNoData;
            return this;
        }

        /**
         * @param alertOnNoData If the monitor should trigger an alert if there is no data
         * 
         * @return builder
         * 
         */
        public Builder alertOnNoData(Boolean alertOnNoData) {
            return alertOnNoData(Output.of(alertOnNoData));
        }

        /**
         * @param aplQuery The query used inside the monitor
         * 
         * @return builder
         * 
         */
        public Builder aplQuery(Output<String> aplQuery) {
            $.aplQuery = aplQuery;
            return this;
        }

        /**
         * @param aplQuery The query used inside the monitor
         * 
         * @return builder
         * 
         */
        public Builder aplQuery(String aplQuery) {
            return aplQuery(Output.of(aplQuery));
        }

        /**
         * @param description Monitor description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Monitor description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param disabledUntil The time the monitor will be disabled until
         * 
         * @return builder
         * 
         */
        public Builder disabledUntil(@Nullable Output<String> disabledUntil) {
            $.disabledUntil = disabledUntil;
            return this;
        }

        /**
         * @param disabledUntil The time the monitor will be disabled until
         * 
         * @return builder
         * 
         */
        public Builder disabledUntil(String disabledUntil) {
            return disabledUntil(Output.of(disabledUntil));
        }

        /**
         * @param intervalMinutes How often the monitor should run
         * 
         * @return builder
         * 
         */
        public Builder intervalMinutes(Output<Integer> intervalMinutes) {
            $.intervalMinutes = intervalMinutes;
            return this;
        }

        /**
         * @param intervalMinutes How often the monitor should run
         * 
         * @return builder
         * 
         */
        public Builder intervalMinutes(Integer intervalMinutes) {
            return intervalMinutes(Output.of(intervalMinutes));
        }

        /**
         * @param name Monitor name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Monitor name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param notifierIds A list of notifier id&#39;s to be used when this monitor triggers
         * 
         * @return builder
         * 
         */
        public Builder notifierIds(@Nullable Output<List<String>> notifierIds) {
            $.notifierIds = notifierIds;
            return this;
        }

        /**
         * @param notifierIds A list of notifier id&#39;s to be used when this monitor triggers
         * 
         * @return builder
         * 
         */
        public Builder notifierIds(List<String> notifierIds) {
            return notifierIds(Output.of(notifierIds));
        }

        /**
         * @param notifierIds A list of notifier id&#39;s to be used when this monitor triggers
         * 
         * @return builder
         * 
         */
        public Builder notifierIds(String... notifierIds) {
            return notifierIds(List.of(notifierIds));
        }

        /**
         * @param notifyByGroup If the monitor should track non-time groups separately
         * 
         * @return builder
         * 
         */
        public Builder notifyByGroup(Output<Boolean> notifyByGroup) {
            $.notifyByGroup = notifyByGroup;
            return this;
        }

        /**
         * @param notifyByGroup If the monitor should track non-time groups separately
         * 
         * @return builder
         * 
         */
        public Builder notifyByGroup(Boolean notifyByGroup) {
            return notifyByGroup(Output.of(notifyByGroup));
        }

        /**
         * @param operator Operator used in monitor trigger evaluation
         * 
         * @return builder
         * 
         */
        public Builder operator(Output<String> operator) {
            $.operator = operator;
            return this;
        }

        /**
         * @param operator Operator used in monitor trigger evaluation
         * 
         * @return builder
         * 
         */
        public Builder operator(String operator) {
            return operator(Output.of(operator));
        }

        /**
         * @param rangeMinutes Query time range from now
         * 
         * @return builder
         * 
         */
        public Builder rangeMinutes(Output<Integer> rangeMinutes) {
            $.rangeMinutes = rangeMinutes;
            return this;
        }

        /**
         * @param rangeMinutes Query time range from now
         * 
         * @return builder
         * 
         */
        public Builder rangeMinutes(Integer rangeMinutes) {
            return rangeMinutes(Output.of(rangeMinutes));
        }

        /**
         * @param resolvable Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
         * monitors
         * 
         * @return builder
         * 
         */
        public Builder resolvable(@Nullable Output<Boolean> resolvable) {
            $.resolvable = resolvable;
            return this;
        }

        /**
         * @param resolvable Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
         * monitors
         * 
         * @return builder
         * 
         */
        public Builder resolvable(Boolean resolvable) {
            return resolvable(Output.of(resolvable));
        }

        /**
         * @param threshold The threshold where the monitor should trigger
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Double> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold The threshold where the monitor should trigger
         * 
         * @return builder
         * 
         */
        public Builder threshold(Double threshold) {
            return threshold(Output.of(threshold));
        }

        public MonitorArgs build() {
            if ($.alertOnNoData == null) {
                throw new MissingRequiredPropertyException("MonitorArgs", "alertOnNoData");
            }
            if ($.aplQuery == null) {
                throw new MissingRequiredPropertyException("MonitorArgs", "aplQuery");
            }
            if ($.intervalMinutes == null) {
                throw new MissingRequiredPropertyException("MonitorArgs", "intervalMinutes");
            }
            if ($.notifyByGroup == null) {
                throw new MissingRequiredPropertyException("MonitorArgs", "notifyByGroup");
            }
            if ($.operator == null) {
                throw new MissingRequiredPropertyException("MonitorArgs", "operator");
            }
            if ($.rangeMinutes == null) {
                throw new MissingRequiredPropertyException("MonitorArgs", "rangeMinutes");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("MonitorArgs", "threshold");
            }
            return $;
        }
    }

}
