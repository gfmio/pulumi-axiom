// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.gfm.pulumiaxiom.axiom;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import io.gfm.pulumiaxiom.axiom.MonitorArgs;
import io.gfm.pulumiaxiom.axiom.Utilities;
import io.gfm.pulumiaxiom.axiom.inputs.MonitorState;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="axiom:index/monitor:Monitor")
public class Monitor extends com.pulumi.resources.CustomResource {
    /**
     * If the monitor should trigger an alert if there is no data
     * 
     */
    @Export(name="alertOnNoData", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> alertOnNoData;

    /**
     * @return If the monitor should trigger an alert if there is no data
     * 
     */
    public Output<Boolean> alertOnNoData() {
        return this.alertOnNoData;
    }
    /**
     * The query used inside the monitor
     * 
     */
    @Export(name="aplQuery", refs={String.class}, tree="[0]")
    private Output<String> aplQuery;

    /**
     * @return The query used inside the monitor
     * 
     */
    public Output<String> aplQuery() {
        return this.aplQuery;
    }
    /**
     * Monitor description
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return Monitor description
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * The time the monitor will be disabled until
     * 
     */
    @Export(name="disabledUntil", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> disabledUntil;

    /**
     * @return The time the monitor will be disabled until
     * 
     */
    public Output<Optional<String>> disabledUntil() {
        return Codegen.optional(this.disabledUntil);
    }
    /**
     * How often the monitor should run
     * 
     */
    @Export(name="intervalMinutes", refs={Integer.class}, tree="[0]")
    private Output<Integer> intervalMinutes;

    /**
     * @return How often the monitor should run
     * 
     */
    public Output<Integer> intervalMinutes() {
        return this.intervalMinutes;
    }
    /**
     * Monitor name
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Monitor name
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * A list of notifier id&#39;s to be used when this monitor triggers
     * 
     */
    @Export(name="notifierIds", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> notifierIds;

    /**
     * @return A list of notifier id&#39;s to be used when this monitor triggers
     * 
     */
    public Output<Optional<List<String>>> notifierIds() {
        return Codegen.optional(this.notifierIds);
    }
    /**
     * If the monitor should track non-time groups separately
     * 
     */
    @Export(name="notifyByGroup", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> notifyByGroup;

    /**
     * @return If the monitor should track non-time groups separately
     * 
     */
    public Output<Boolean> notifyByGroup() {
        return this.notifyByGroup;
    }
    /**
     * Operator used in monitor trigger evaluation
     * 
     */
    @Export(name="operator", refs={String.class}, tree="[0]")
    private Output<String> operator;

    /**
     * @return Operator used in monitor trigger evaluation
     * 
     */
    public Output<String> operator() {
        return this.operator;
    }
    /**
     * Query time range from now
     * 
     */
    @Export(name="rangeMinutes", refs={Integer.class}, tree="[0]")
    private Output<Integer> rangeMinutes;

    /**
     * @return Query time range from now
     * 
     */
    public Output<Integer> rangeMinutes() {
        return this.rangeMinutes;
    }
    /**
     * Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
     * monitors
     * 
     */
    @Export(name="resolvable", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> resolvable;

    /**
     * @return Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
     * monitors
     * 
     */
    public Output<Boolean> resolvable() {
        return this.resolvable;
    }
    /**
     * The threshold where the monitor should trigger
     * 
     */
    @Export(name="threshold", refs={Double.class}, tree="[0]")
    private Output<Double> threshold;

    /**
     * @return The threshold where the monitor should trigger
     * 
     */
    public Output<Double> threshold() {
        return this.threshold;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Monitor(String name) {
        this(name, MonitorArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Monitor(String name, MonitorArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Monitor(String name, MonitorArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("axiom:index/monitor:Monitor", name, args == null ? MonitorArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Monitor(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("axiom:index/monitor:Monitor", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Monitor get(String name, Output<String> id, @Nullable MonitorState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Monitor(name, id, state, options);
    }
}
