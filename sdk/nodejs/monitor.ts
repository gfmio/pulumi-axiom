// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Monitor extends pulumi.CustomResource {
    /**
     * Get an existing Monitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MonitorState, opts?: pulumi.CustomResourceOptions): Monitor {
        return new Monitor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'axiom:index/monitor:Monitor';

    /**
     * Returns true if the given object is an instance of Monitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Monitor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Monitor.__pulumiType;
    }

    /**
     * If the monitor should trigger an alert if there is no data
     */
    public readonly alertOnNoData!: pulumi.Output<boolean>;
    /**
     * The query used inside the monitor
     */
    public readonly aplQuery!: pulumi.Output<string>;
    /**
     * Monitor description
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The time the monitor will be disabled until
     */
    public readonly disabledUntil!: pulumi.Output<string | undefined>;
    /**
     * How often the monitor should run
     */
    public readonly intervalMinutes!: pulumi.Output<number>;
    /**
     * Monitor name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of notifier id's to be used when this monitor triggers
     */
    public readonly notifierIds!: pulumi.Output<string[] | undefined>;
    /**
     * If the monitor should track non-time groups separately
     */
    public readonly notifyByGroup!: pulumi.Output<boolean>;
    /**
     * Operator used in monitor trigger evaluation
     */
    public readonly operator!: pulumi.Output<string>;
    /**
     * Query time range from now
     */
    public readonly rangeMinutes!: pulumi.Output<number>;
    /**
     * Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
     * monitors
     */
    public readonly resolvable!: pulumi.Output<boolean>;
    /**
     * The threshold where the monitor should trigger
     */
    public readonly threshold!: pulumi.Output<number>;

    /**
     * Create a Monitor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MonitorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MonitorArgs | MonitorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MonitorState | undefined;
            resourceInputs["alertOnNoData"] = state ? state.alertOnNoData : undefined;
            resourceInputs["aplQuery"] = state ? state.aplQuery : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["disabledUntil"] = state ? state.disabledUntil : undefined;
            resourceInputs["intervalMinutes"] = state ? state.intervalMinutes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notifierIds"] = state ? state.notifierIds : undefined;
            resourceInputs["notifyByGroup"] = state ? state.notifyByGroup : undefined;
            resourceInputs["operator"] = state ? state.operator : undefined;
            resourceInputs["rangeMinutes"] = state ? state.rangeMinutes : undefined;
            resourceInputs["resolvable"] = state ? state.resolvable : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
        } else {
            const args = argsOrState as MonitorArgs | undefined;
            if ((!args || args.alertOnNoData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertOnNoData'");
            }
            if ((!args || args.aplQuery === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aplQuery'");
            }
            if ((!args || args.intervalMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intervalMinutes'");
            }
            if ((!args || args.notifyByGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notifyByGroup'");
            }
            if ((!args || args.operator === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operator'");
            }
            if ((!args || args.rangeMinutes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rangeMinutes'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            resourceInputs["alertOnNoData"] = args ? args.alertOnNoData : undefined;
            resourceInputs["aplQuery"] = args ? args.aplQuery : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["disabledUntil"] = args ? args.disabledUntil : undefined;
            resourceInputs["intervalMinutes"] = args ? args.intervalMinutes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notifierIds"] = args ? args.notifierIds : undefined;
            resourceInputs["notifyByGroup"] = args ? args.notifyByGroup : undefined;
            resourceInputs["operator"] = args ? args.operator : undefined;
            resourceInputs["rangeMinutes"] = args ? args.rangeMinutes : undefined;
            resourceInputs["resolvable"] = args ? args.resolvable : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Monitor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Monitor resources.
 */
export interface MonitorState {
    /**
     * If the monitor should trigger an alert if there is no data
     */
    alertOnNoData?: pulumi.Input<boolean>;
    /**
     * The query used inside the monitor
     */
    aplQuery?: pulumi.Input<string>;
    /**
     * Monitor description
     */
    description?: pulumi.Input<string>;
    /**
     * The time the monitor will be disabled until
     */
    disabledUntil?: pulumi.Input<string>;
    /**
     * How often the monitor should run
     */
    intervalMinutes?: pulumi.Input<number>;
    /**
     * Monitor name
     */
    name?: pulumi.Input<string>;
    /**
     * A list of notifier id's to be used when this monitor triggers
     */
    notifierIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If the monitor should track non-time groups separately
     */
    notifyByGroup?: pulumi.Input<boolean>;
    /**
     * Operator used in monitor trigger evaluation
     */
    operator?: pulumi.Input<string>;
    /**
     * Query time range from now
     */
    rangeMinutes?: pulumi.Input<number>;
    /**
     * Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
     * monitors
     */
    resolvable?: pulumi.Input<boolean>;
    /**
     * The threshold where the monitor should trigger
     */
    threshold?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Monitor resource.
 */
export interface MonitorArgs {
    /**
     * If the monitor should trigger an alert if there is no data
     */
    alertOnNoData: pulumi.Input<boolean>;
    /**
     * The query used inside the monitor
     */
    aplQuery: pulumi.Input<string>;
    /**
     * Monitor description
     */
    description?: pulumi.Input<string>;
    /**
     * The time the monitor will be disabled until
     */
    disabledUntil?: pulumi.Input<string>;
    /**
     * How often the monitor should run
     */
    intervalMinutes: pulumi.Input<number>;
    /**
     * Monitor name
     */
    name?: pulumi.Input<string>;
    /**
     * A list of notifier id's to be used when this monitor triggers
     */
    notifierIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If the monitor should track non-time groups separately
     */
    notifyByGroup: pulumi.Input<boolean>;
    /**
     * Operator used in monitor trigger evaluation
     */
    operator: pulumi.Input<string>;
    /**
     * Query time range from now
     */
    rangeMinutes: pulumi.Input<number>;
    /**
     * Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
     * monitors
     */
    resolvable?: pulumi.Input<boolean>;
    /**
     * The threshold where the monitor should trigger
     */
    threshold: pulumi.Input<number>;
}
