// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiAxiom.Axiom
{
    public static class GetMonitor
    {
        public static Task<GetMonitorResult> InvokeAsync(GetMonitorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMonitorResult>("axiom:index/getMonitor:getMonitor", args ?? new GetMonitorArgs(), options.WithDefaults());

        public static Output<GetMonitorResult> Invoke(GetMonitorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMonitorResult>("axiom:index/getMonitor:getMonitor", args ?? new GetMonitorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMonitorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Monitor identifier
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetMonitorArgs()
        {
        }
        public static new GetMonitorArgs Empty => new GetMonitorArgs();
    }

    public sealed class GetMonitorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Monitor identifier
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetMonitorInvokeArgs()
        {
        }
        public static new GetMonitorInvokeArgs Empty => new GetMonitorInvokeArgs();
    }


    [OutputType]
    public sealed class GetMonitorResult
    {
        /// <summary>
        /// If the monitor should trigger an alert if there is no data
        /// </summary>
        public readonly bool AlertOnNoData;
        /// <summary>
        /// The query used inside the monitor
        /// </summary>
        public readonly string AplQuery;
        /// <summary>
        /// Monitor description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The time the monitor will be disabled until
        /// </summary>
        public readonly string DisabledUntil;
        /// <summary>
        /// Monitor identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// How often the monitor should run
        /// </summary>
        public readonly int IntervalMinutes;
        /// <summary>
        /// Monitor name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A list of notifier id's to be used when this monitor triggers
        /// </summary>
        public readonly ImmutableArray<string> NotifierIds;
        public readonly bool NotifyByGroup;
        /// <summary>
        /// Operator used in monitor trigger evaluation
        /// </summary>
        public readonly string Operator;
        /// <summary>
        /// Query time range from now
        /// </summary>
        public readonly int RangeMinutes;
        public readonly bool Resolvable;
        /// <summary>
        /// The threshold where the monitor should trigger
        /// </summary>
        public readonly double Threshold;

        [OutputConstructor]
        private GetMonitorResult(
            bool alertOnNoData,

            string aplQuery,

            string description,

            string disabledUntil,

            string id,

            int intervalMinutes,

            string name,

            ImmutableArray<string> notifierIds,

            bool notifyByGroup,

            string @operator,

            int rangeMinutes,

            bool resolvable,

            double threshold)
        {
            AlertOnNoData = alertOnNoData;
            AplQuery = aplQuery;
            Description = description;
            DisabledUntil = disabledUntil;
            Id = id;
            IntervalMinutes = intervalMinutes;
            Name = name;
            NotifierIds = notifierIds;
            NotifyByGroup = notifyByGroup;
            Operator = @operator;
            RangeMinutes = rangeMinutes;
            Resolvable = resolvable;
            Threshold = threshold;
        }
    }
}
