// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace PulumiAxiom.Axiom
{
    [AxiomResourceType("axiom:index/monitor:Monitor")]
    public partial class Monitor : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If the monitor should trigger an alert if there is no data
        /// </summary>
        [Output("alertOnNoData")]
        public Output<bool> AlertOnNoData { get; private set; } = null!;

        /// <summary>
        /// The query used inside the monitor
        /// </summary>
        [Output("aplQuery")]
        public Output<string> AplQuery { get; private set; } = null!;

        /// <summary>
        /// Monitor description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The time the monitor will be disabled until
        /// </summary>
        [Output("disabledUntil")]
        public Output<string?> DisabledUntil { get; private set; } = null!;

        /// <summary>
        /// How often the monitor should run
        /// </summary>
        [Output("intervalMinutes")]
        public Output<int> IntervalMinutes { get; private set; } = null!;

        /// <summary>
        /// Monitor name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A list of notifier id's to be used when this monitor triggers
        /// </summary>
        [Output("notifierIds")]
        public Output<ImmutableArray<string>> NotifierIds { get; private set; } = null!;

        /// <summary>
        /// If the monitor should track non-time groups separately
        /// </summary>
        [Output("notifyByGroup")]
        public Output<bool> NotifyByGroup { get; private set; } = null!;

        /// <summary>
        /// Operator used in monitor trigger evaluation
        /// </summary>
        [Output("operator")]
        public Output<string> Operator { get; private set; } = null!;

        /// <summary>
        /// Query time range from now
        /// </summary>
        [Output("rangeMinutes")]
        public Output<int> RangeMinutes { get; private set; } = null!;

        /// <summary>
        /// Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
        /// monitors
        /// </summary>
        [Output("resolvable")]
        public Output<bool> Resolvable { get; private set; } = null!;

        /// <summary>
        /// The threshold where the monitor should trigger
        /// </summary>
        [Output("threshold")]
        public Output<double> Threshold { get; private set; } = null!;


        /// <summary>
        /// Create a Monitor resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Monitor(string name, MonitorArgs args, CustomResourceOptions? options = null)
            : base("axiom:index/monitor:Monitor", name, args ?? new MonitorArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Monitor(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
            : base("axiom:index/monitor:Monitor", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/gfmio/pulumi-axiom",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Monitor resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Monitor Get(string name, Input<string> id, MonitorState? state = null, CustomResourceOptions? options = null)
        {
            return new Monitor(name, id, state, options);
        }
    }

    public sealed class MonitorArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If the monitor should trigger an alert if there is no data
        /// </summary>
        [Input("alertOnNoData", required: true)]
        public Input<bool> AlertOnNoData { get; set; } = null!;

        /// <summary>
        /// The query used inside the monitor
        /// </summary>
        [Input("aplQuery", required: true)]
        public Input<string> AplQuery { get; set; } = null!;

        /// <summary>
        /// Monitor description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The time the monitor will be disabled until
        /// </summary>
        [Input("disabledUntil")]
        public Input<string>? DisabledUntil { get; set; }

        /// <summary>
        /// How often the monitor should run
        /// </summary>
        [Input("intervalMinutes", required: true)]
        public Input<int> IntervalMinutes { get; set; } = null!;

        /// <summary>
        /// Monitor name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifierIds")]
        private InputList<string>? _notifierIds;

        /// <summary>
        /// A list of notifier id's to be used when this monitor triggers
        /// </summary>
        public InputList<string> NotifierIds
        {
            get => _notifierIds ?? (_notifierIds = new InputList<string>());
            set => _notifierIds = value;
        }

        /// <summary>
        /// If the monitor should track non-time groups separately
        /// </summary>
        [Input("notifyByGroup", required: true)]
        public Input<bool> NotifyByGroup { get; set; } = null!;

        /// <summary>
        /// Operator used in monitor trigger evaluation
        /// </summary>
        [Input("operator", required: true)]
        public Input<string> Operator { get; set; } = null!;

        /// <summary>
        /// Query time range from now
        /// </summary>
        [Input("rangeMinutes", required: true)]
        public Input<int> RangeMinutes { get; set; } = null!;

        /// <summary>
        /// Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
        /// monitors
        /// </summary>
        [Input("resolvable")]
        public Input<bool>? Resolvable { get; set; }

        /// <summary>
        /// The threshold where the monitor should trigger
        /// </summary>
        [Input("threshold", required: true)]
        public Input<double> Threshold { get; set; } = null!;

        public MonitorArgs()
        {
        }
        public static new MonitorArgs Empty => new MonitorArgs();
    }

    public sealed class MonitorState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If the monitor should trigger an alert if there is no data
        /// </summary>
        [Input("alertOnNoData")]
        public Input<bool>? AlertOnNoData { get; set; }

        /// <summary>
        /// The query used inside the monitor
        /// </summary>
        [Input("aplQuery")]
        public Input<string>? AplQuery { get; set; }

        /// <summary>
        /// Monitor description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The time the monitor will be disabled until
        /// </summary>
        [Input("disabledUntil")]
        public Input<string>? DisabledUntil { get; set; }

        /// <summary>
        /// How often the monitor should run
        /// </summary>
        [Input("intervalMinutes")]
        public Input<int>? IntervalMinutes { get; set; }

        /// <summary>
        /// Monitor name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifierIds")]
        private InputList<string>? _notifierIds;

        /// <summary>
        /// A list of notifier id's to be used when this monitor triggers
        /// </summary>
        public InputList<string> NotifierIds
        {
            get => _notifierIds ?? (_notifierIds = new InputList<string>());
            set => _notifierIds = value;
        }

        /// <summary>
        /// If the monitor should track non-time groups separately
        /// </summary>
        [Input("notifyByGroup")]
        public Input<bool>? NotifyByGroup { get; set; }

        /// <summary>
        /// Operator used in monitor trigger evaluation
        /// </summary>
        [Input("operator")]
        public Input<string>? Operator { get; set; }

        /// <summary>
        /// Query time range from now
        /// </summary>
        [Input("rangeMinutes")]
        public Input<int>? RangeMinutes { get; set; }

        /// <summary>
        /// Determines whether the events triggered by the monitor are individually resolvable. This has no effect on threshold
        /// monitors
        /// </summary>
        [Input("resolvable")]
        public Input<bool>? Resolvable { get; set; }

        /// <summary>
        /// The threshold where the monitor should trigger
        /// </summary>
        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        public MonitorState()
        {
        }
        public static new MonitorState Empty => new MonitorState();
    }
}
